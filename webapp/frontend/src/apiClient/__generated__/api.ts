/* tslint:disable */
/* eslint-disable */
/**
 * R-ISUCON 2021 Summer
 * API mock for R-ISUCON 2021 Summer r-calendar
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface Calendar
 */
export interface Calendar {
  /**
   * Date of the calendar (date counts date 1 January 1970 based on UNIX time)
   * @type {number}
   * @memberof Calendar
   */
  date: number;
  /**
   * list of schedules that is contained by calendar (sort by Schedule.id)
   * @type {Array<ScheduleWithID>}
   * @memberof Calendar
   */
  schedules: Array<ScheduleWithID>;
}
/**
 *
 * @export
 * @interface Certification
 */
export interface Certification {
  /**
   * email of user
   * @type {string}
   * @memberof Certification
   */
  email: string;
  /**
   * password of user
   * @type {string}
   * @memberof Certification
   */
  password: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  language: string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   * searching result users (order by User.id)
   * @type {Array<User>}
   * @memberof InlineResponse2001
   */
  users: Array<User>;
}
/**
 *
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
  /**
   * ULID
   * @type {string}
   * @memberof InlineResponse201
   */
  id: string;
}
/**
 *
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse400
   */
  message: string;
}
/**
 *
 * @export
 * @interface InlineResponse4001
 */
export interface InlineResponse4001 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse4001
   */
  message: string;
}
/**
 *
 * @export
 * @interface InlineResponse4002
 */
export interface InlineResponse4002 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse4002
   */
  message: string;
}
/**
 *
 * @export
 * @interface InlineResponse4003
 */
export interface InlineResponse4003 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse4003
   */
  message: string;
}
/**
 *
 * @export
 * @interface InlineResponse401
 */
export interface InlineResponse401 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse401
   */
  message: string;
}
/**
 *
 * @export
 * @interface InlineResponse4011
 */
export interface InlineResponse4011 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse4011
   */
  message: string;
}
/**
 *
 * @export
 * @interface Schedule
 */
export interface Schedule {
  /**
   * Unix timestamp
   * @type {number}
   * @memberof Schedule
   */
  start_at: number;
  /**
   * Unix timestamp
   * @type {number}
   * @memberof Schedule
   */
  end_at: number;
  /**
   * Title of schedule
   * @type {string}
   * @memberof Schedule
   */
  title: string;
  /**
   * Description of schedule
   * @type {string}
   * @memberof Schedule
   */
  description: string;
  /**
   * name of meeting room linked to schedule
   * @type {string}
   * @memberof Schedule
   */
  meeting_room?: string;
}
/**
 *
 * @export
 * @interface Schedule1
 */
export interface Schedule1 {
  /**
   * Unix timestamp
   * @type {number}
   * @memberof Schedule1
   */
  start_at: number;
  /**
   * Unix timestamp
   * @type {number}
   * @memberof Schedule1
   */
  end_at: number;
  /**
   * Title of schedule
   * @type {string}
   * @memberof Schedule1
   */
  title: string;
  /**
   * Description of schedule
   * @type {string}
   * @memberof Schedule1
   */
  description: string;
  /**
   * name of meeting room linked to schedule
   * @type {string}
   * @memberof Schedule1
   */
  meeting_room?: string;
}
/**
 * Data Schedule data with array of attendee ID
 * @export
 * @interface ScheduleWithAttendeeIDs
 */
export interface ScheduleWithAttendeeIDs {
  /**
   * Unix timestamp
   * @type {number}
   * @memberof ScheduleWithAttendeeIDs
   */
  start_at: number;
  /**
   * Unix timestamp
   * @type {number}
   * @memberof ScheduleWithAttendeeIDs
   */
  end_at: number;
  /**
   * Title of schedule
   * @type {string}
   * @memberof ScheduleWithAttendeeIDs
   */
  title: string;
  /**
   * Description of schedule
   * @type {string}
   * @memberof ScheduleWithAttendeeIDs
   */
  description: string;
  /**
   * name of meeting room linked to schedule
   * @type {string}
   * @memberof ScheduleWithAttendeeIDs
   */
  meeting_room?: string;
  /**
   * List of id of attendees (sort by lexical order)
   * @type {Array<string>}
   * @memberof ScheduleWithAttendeeIDs
   */
  attendees: Array<string>;
}
/**
 *
 * @export
 * @interface ScheduleWithAttendeeIDsAllOf
 */
export interface ScheduleWithAttendeeIDsAllOf {
  /**
   * List of id of attendees (sort by lexical order)
   * @type {Array<string>}
   * @memberof ScheduleWithAttendeeIDsAllOf
   */
  attendees: Array<string>;
}
/**
 * Schedule data with ID
 * @export
 * @interface ScheduleWithID
 */
export interface ScheduleWithID {
  /**
   * Unix timestamp
   * @type {number}
   * @memberof ScheduleWithID
   */
  start_at: number;
  /**
   * Unix timestamp
   * @type {number}
   * @memberof ScheduleWithID
   */
  end_at: number;
  /**
   * Title of schedule
   * @type {string}
   * @memberof ScheduleWithID
   */
  title: string;
  /**
   * Description of schedule
   * @type {string}
   * @memberof ScheduleWithID
   */
  description: string;
  /**
   * name of meeting room linked to schedule
   * @type {string}
   * @memberof ScheduleWithID
   */
  meeting_room?: string;
  /**
   * ULID
   * @type {string}
   * @memberof ScheduleWithID
   */
  id: string;
  /**
   * List of attendees (sort by email in lexical order)
   * @type {Array<User>}
   * @memberof ScheduleWithID
   */
  attendees: Array<User>;
}
/**
 *
 * @export
 * @interface ScheduleWithIDAllOf
 */
export interface ScheduleWithIDAllOf {
  /**
   * ULID
   * @type {string}
   * @memberof ScheduleWithIDAllOf
   */
  id: string;
  /**
   * List of attendees (sort by email in lexical order)
   * @type {Array<User>}
   * @memberof ScheduleWithIDAllOf
   */
  attendees: Array<User>;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   * ULID
   * @type {string}
   * @memberof User
   */
  id: string;
  /**
   * email of user
   * @type {string}
   * @memberof User
   */
  email: string;
  /**
   * name of user
   * @type {string}
   * @memberof User
   */
  name: string;
}
/**
 * properties of user
 * @export
 * @interface UserProperties
 */
export interface UserProperties {
  /**
   * email of user
   * @type {string}
   * @memberof UserProperties
   */
  email: string;
  /**
   * password of user
   * @type {string}
   * @memberof UserProperties
   */
  password: string;
  /**
   * name of user
   * @type {string}
   * @memberof UserProperties
   */
  name: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Get of specific calendar by user id
     * @param {string} userId -| user id of the calender to fetch return a day schedules of the date of &#x60;date&#x60; query
     * @param {number} date Date of the calendar (date counts date 1 January 1970 based on UNIX time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalendarId: async (
      userId: string,
      date: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("getCalendarId", "userId", userId);
      // verify required parameter 'date' is not null or undefined
      assertParamExists("getCalendarId", "date", date);
      const localVarPath = `/calendar/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (date !== undefined) {
        localVarQueryParameter["date"] = date;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get my own user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get details of specific user by id
     * @param {string} id id of schedule to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getScheduleId", "id", id);
      const localVarPath = `/schedule/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Search user with any query
     * @param {string} query query for searching user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      query: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'query' is not null or undefined
      assertParamExists("getUser", "query", query);
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (query !== undefined) {
        localVarQueryParameter["query"] = query;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get details of specific user by id
     * @param {string} id id of user to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserId", "id", id);
      const localVarPath = `/user/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Initialize server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postInitialize: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/initialize`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Login to app
     * @param {Certification} [certification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLogin: async (
      certification?: Certification,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        certification,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Logout from app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLogout: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create new schedule
     * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSchedule: async (
      scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/schedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        scheduleWithAttendeeIDs,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create new user
     * @param {UserProperties} [userProperties]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser: async (
      userProperties?: UserProperties,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userProperties,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update my user data
     * @param {UserProperties} [userProperties]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMe: async (
      userProperties?: UserProperties,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userProperties,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update new user icon image
     * @param {any} icon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeIcon: async (
      icon: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'icon' is not null or undefined
      assertParamExists("updateMeIcon", "icon", icon);
      const localVarPath = `/me/icon`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      if (icon !== undefined) {
        localVarFormParams.append("icon", icon as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Update schedule data
     * @param {string} id id of schedule to update
     * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduleId: async (
      id: string,
      scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateScheduleId", "id", id);
      const localVarPath = `/schedule/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        scheduleWithAttendeeIDs,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Get of specific calendar by user id
     * @param {string} userId -| user id of the calender to fetch return a day schedules of the date of &#x60;date&#x60; query
     * @param {number} date Date of the calendar (date counts date 1 January 1970 based on UNIX time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCalendarId(
      userId: string,
      date: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Calendar>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCalendarId(
        userId,
        date,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get my own user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMe(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get details of specific user by id
     * @param {string} id id of schedule to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getScheduleId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleWithID>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduleId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Search user with any query
     * @param {string} query query for searching user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      query: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse2001>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        query,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Get details of specific user by id
     * @param {string} id id of user to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Initialize server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postInitialize(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse200>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postInitialize(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Login to app
     * @param {Certification} [certification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postLogin(
      certification?: Certification,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(
        certification,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Logout from app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postLogout(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postLogout(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Create new schedule
     * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postSchedule(
      scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InlineResponse201>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postSchedule(
        scheduleWithAttendeeIDs,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Create new user
     * @param {UserProperties} [userProperties]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUser(
      userProperties?: UserProperties,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(
        userProperties,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update my user data
     * @param {UserProperties} [userProperties]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMe(
      userProperties?: UserProperties,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMe(
        userProperties,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update new user icon image
     * @param {any} icon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMeIcon(
      icon: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeIcon(
        icon,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Update schedule data
     * @param {string} id id of schedule to update
     * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateScheduleId(
      id: string,
      scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateScheduleId(
          id,
          scheduleWithAttendeeIDs,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Get of specific calendar by user id
     * @param {string} userId -| user id of the calender to fetch return a day schedules of the date of &#x60;date&#x60; query
     * @param {number} date Date of the calendar (date counts date 1 January 1970 based on UNIX time)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCalendarId(
      userId: string,
      date: number,
      options?: any
    ): AxiosPromise<Calendar> {
      return localVarFp
        .getCalendarId(userId, date, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get my own user data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<User> {
      return localVarFp
        .getMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get details of specific user by id
     * @param {string} id id of schedule to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScheduleId(id: string, options?: any): AxiosPromise<ScheduleWithID> {
      return localVarFp
        .getScheduleId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Search user with any query
     * @param {string} query query for searching user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(query: string, options?: any): AxiosPromise<InlineResponse2001> {
      return localVarFp
        .getUser(query, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get details of specific user by id
     * @param {string} id id of user to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserId(id: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Initialize server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postInitialize(options?: any): AxiosPromise<InlineResponse200> {
      return localVarFp
        .postInitialize(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Login to app
     * @param {Certification} [certification]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLogin(
      certification?: Certification,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .postLogin(certification, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Logout from app
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLogout(options?: any): AxiosPromise<void> {
      return localVarFp
        .postLogout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create new schedule
     * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postSchedule(
      scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
      options?: any
    ): AxiosPromise<InlineResponse201> {
      return localVarFp
        .postSchedule(scheduleWithAttendeeIDs, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create new user
     * @param {UserProperties} [userProperties]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser(
      userProperties?: UserProperties,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .postUser(userProperties, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update my user data
     * @param {UserProperties} [userProperties]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMe(
      userProperties?: UserProperties,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateMe(userProperties, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update new user icon image
     * @param {any} icon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMeIcon(icon: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .updateMeIcon(icon, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Update schedule data
     * @param {string} id id of schedule to update
     * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduleId(
      id: string,
      scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateScheduleId(id, scheduleWithAttendeeIDs, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Get of specific calendar by user id
   * @param {string} userId -| user id of the calender to fetch return a day schedules of the date of &#x60;date&#x60; query
   * @param {number} date Date of the calendar (date counts date 1 January 1970 based on UNIX time)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCalendarId(
    userId: string,
    date: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getCalendarId(userId, date, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get my own user data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMe(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get details of specific user by id
   * @param {string} id id of schedule to fetch
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getScheduleId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getScheduleId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Search user with any query
   * @param {string} query query for searching user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUser(query: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getUser(query, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get details of specific user by id
   * @param {string} id id of user to fetch
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUserId(id: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getUserId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Initialize server
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postInitialize(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .postInitialize(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Login to app
   * @param {Certification} [certification]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postLogin(
    certification?: Certification,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postLogin(certification, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Logout from app
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postLogout(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .postLogout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create new schedule
   * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postSchedule(
    scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postSchedule(scheduleWithAttendeeIDs, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create new user
   * @param {UserProperties} [userProperties]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postUser(
    userProperties?: UserProperties,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postUser(userProperties, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update my user data
   * @param {UserProperties} [userProperties]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateMe(
    userProperties?: UserProperties,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateMe(userProperties, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update new user icon image
   * @param {any} icon
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateMeIcon(icon: any, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .updateMeIcon(icon, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Update schedule data
   * @param {string} id id of schedule to update
   * @param {ScheduleWithAttendeeIDs} [scheduleWithAttendeeIDs]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateScheduleId(
    id: string,
    scheduleWithAttendeeIDs?: ScheduleWithAttendeeIDs,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateScheduleId(id, scheduleWithAttendeeIDs, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
